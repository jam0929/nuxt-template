@mixin flex(
  $direction: row,
  $justifyContent: flex-start,
  $alignItems: flex-start) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin text(
  $size: inherit,
  $weight: normal,
  $lineHeight: inherit,
  $color: inherit,
  $family: inherit) {
  font-family: $family;
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
  color: $color;
}

/* Button */
@mixin btn(
  $padding: '1rem 2rem',
  $bg: #2677CC,
  $textColor: #fff,
  $radius: .3rem,
  $box-shadow: false
) {

  width: 100%;
  height: 5rem;
  background-color: $bg;
  border-radius: $radius;
  padding: unquote($padding);
  white-space: nowrap;
  text-decoration: none;
  transition: all 0.3s ease-in-out;
  cursor: pointer;
  font-size: 1.4rem;
  font-weight: bold;
  color: $textColor;

  @if $box-shadow == true {
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, .2),
    0 2px 1px -1px rgba(0, 0, 0, .12),
    0 1px 1px 0 rgba(0, 0, 0, .14);
  }

  &:active, &:hover {
    background: darken($bg, 8%);
  }

  &:focus {
  }

  &:visited {
  }
}

/// @argument {string} $position
///   A CSS position value.
///
/// @argument {list} $box-edge-values
///   List of lengths; accepts CSS shorthand.
/* Position */

@mixin pos(
  $position: relative,
  $box-edge-values: 0
) {

  $box-edge-values: _unpack-shorthand($box-edge-values);
  position: $position;
  top: nth($box-edge-values, 1);
  right: nth($box-edge-values, 2);
  bottom: nth($box-edge-values, 3);
  left: nth($box-edge-values, 4);
}

/* ellipsis : 말줄임 */
// 조건: 일정한 고정된 너비와 높이를 가져야 한다.
@mixin ellipsis($isMultiLine: false) {
  display: inline-block;
  width: 200px;                         // overwrite property
  height: 30px;                         // overwrite property
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  /* 여러 줄일 때 추가 스타일 */
  @if $isMultiLine == true {
    white-space: normal;
    line-height: 1.2;                 // overwrite property
    height: 3.6em;                    // overwrite property
    text-align: left;
    word-wrap: break-word;
    display: -webkit-box;
    -webkit-line-clamp: 3;            // 몇번째 줄에서 말줄임 할 것인지. overwrite property
    -webkit-box-orient: vertical;
  }
}

@mixin z-index($key) {
  z-index: z-index($key);
}
 
/* Spacing */ 
@mixin m($t: '1px', $r: null, $b: null, $l: null) { 
  @if ($t and $r and $b and $l) { 
    @include mt($t); 
    @include mr($r); 
    @include mb($b); 
    @include ml($l); 
  } @else if ($t and $r and $b and not $l) { 
    @include mt($t); 
    @include mx($r); 
    @include mb($b); 
  } @else if ($t and $r and not $b and not $l) { 
    @include my($t); 
    @include mx($r); 
  } @else if ($t and not $r and not $b and not $l) { 
    @if ($t == 'auto') { 
      @include my(0); //be explicit about what the browser does 
      @include mx(auto); 
    } @else { 
      @include my($t); 
      @include mx($t); 
    } 
  } @else { 
    @error "m(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects m($size), m($y, $x), m($t, $x, $b) or m($t, $r, $b, $l)"; 
  } 
} 
 
@mixin mx($r : '1px', $l : null) { 
  @if ($r and $l) { 
    @include mr($r); 
    @include ml($l); 
  } @else if ($r and not $l) { 
    @include mr($r); 
    @include ml($r); 
  } @else { 
    @error "mx(#{$r}, #{$l}): Invalid parameters. Expects mx($size) or mx($r, $l)"; 
  } 
} 
 
@mixin my($t : '1px', $b : null) { 
  @if ($t and $b) { 
    @include mt($t); 
    @include mb($b); 
  } @else if ($t and not $b) { 
    @include mt($t); 
    @include mb($t); 
  } @else { 
    @error "my(#{$t}, #{$b}): Invalid parameters. Expects my($size) or my($t, $b)"; 
  } 
} 
 
@mixin mt($size : '1px') { 
  margin-top: $size; 
} 
 
@mixin mr($size : '1px') { 
  margin-right: $size; 
} 
 
@mixin mb($size : '1px') { 
  margin-bottom: $size; 
} 
 
@mixin ml($size : '1px') { 
  margin-left: $size; 
} 
 
@mixin p($t : '1px', $r: null, $b: null, $l: null) { 
  @if ($t and $r and $b and $l) { 
    @include pt($t); 
    @include pr($r); 
    @include pb($b); 
    @include pl($l); 
  } @else if ($t and $r and $b and not $l) { 
    @include pt($t); 
    @include px($r); 
    @include pb($b); 
  } @else if ($t and $r and not $b and not $l) { 
    @include py($t); 
    @include px($r); 
  } @else if ($t and not $r and not $b and not $l) { 
    @include py($t); 
    @include px($t); 
  } @else { 
    @error "p(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects p($size), p($y, $x), p($t, $x, $b) or p($t, $r, $b, $l)"; 
  } 
} 
 
@mixin px($r : '1px', $l : null) { 
  @if ($r and $l) { 
    @include pr($r); 
    @include pl($l); 
  } @else if ($r and not $l) { 
    @include pr($r); 
    @include pl($r); 
  } @else { 
    @error "px(#{$r}, #{$l}): Invalid parameters. Expects px($size) or px($r, $l)"; 
  } 
} 
 
@mixin py($t : '1px', $b : null) { 
  @if ($t and $b) { 
    @include pt($t); 
    @include pb($b); 
  } @else if ($t and not $b) { 
    @include pt($t); 
    @include pb($t); 
  } @else { 
    @error "py(#{$t}, #{$b}): Invalid parameters. Expects py($size) or py($t, $b)"; 
  } 
} 
 
@mixin pt($size : '1px') { 
  padding-top: $size; 
} 
 
@mixin pr($size : '1px') { 
  padding-right: $size; 
} 
 
@mixin pb($size : '1px') { 
  padding-bottom: $size; 
} 
 
@mixin pl($size : '1px') { 
  padding-left: $size; 
}
